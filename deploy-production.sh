#!/bin/bash

# Script de d√©ploiement OpenProject MCP Server pour Production
# Environnement s√©curis√© sans certificat SSL

set -e

# Configuration
COMPOSE_FILE="docker-compose-production.yml"
ENV_FILE="env.production"
PROJECT_NAME="openproject-mcp"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    if [ ! -f "$ENV_FILE" ]; then
        log_error "Fichier d'environnement $ENV_FILE non trouv√©"
        exit 1
    fi
    
    log_info "Pr√©requis v√©rifi√©s ‚úì"
}

# V√©rification de la configuration
check_configuration() {
    log_info "V√©rification de la configuration..."
    
    # V√©rifier que l'API key est configur√©e
    if grep -q "your_40_character_api_key_here" "$ENV_FILE"; then
        log_error "Veuillez configurer votre API key OpenProject dans $ENV_FILE"
        exit 1
    fi
    
    # V√©rifier que l'URL OpenProject est configur√©e
    if ! grep -q "OPENPROJECT_URL=http://" "$ENV_FILE"; then
        log_error "Veuillez configurer l'URL OpenProject dans $ENV_FILE"
        exit 1
    fi
    
    log_info "Configuration v√©rifi√©e ‚úì"
}

# Construction et d√©ploiement
deploy() {
    log_info "D√©marrage du d√©ploiement..."
    
    # Arr√™ter les conteneurs existants
    log_info "Arr√™t des conteneurs existants..."
    docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" down || true
    
    # Nettoyer les images obsol√®tes
    log_info "Nettoyage des images obsol√®tes..."
    docker image prune -f
    
    # Construire et d√©marrer
    log_info "Construction et d√©marrage des services..."
    docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d --build
    
    log_info "D√©ploiement termin√© ‚úì"
}

# V√©rification du statut
check_status() {
    log_info "V√©rification du statut des services..."
    
    # Attendre que les services d√©marrent
    sleep 10
    
    # V√©rifier le statut des conteneurs
    if docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" ps | grep -q "Up"; then
        log_info "Services d√©marr√©s avec succ√®s ‚úì"
    else
        log_error "Erreur lors du d√©marrage des services"
        docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" logs
        exit 1
    fi
    
    # V√©rifier la sant√© du service
    log_info "V√©rification de la sant√© du service..."
    sleep 5
    
    # R√©cup√©rer le port de statut
    STATUS_PORT=$(grep "MCP_STATUS_PORT" "$ENV_FILE" | cut -d'=' -f2)
    STATUS_PORT=${STATUS_PORT:-39128}
    
    if curl -s "http://localhost:$STATUS_PORT/health" > /dev/null; then
        log_info "Service MCP en bonne sant√© ‚úì"
    else
        log_warn "Service MCP non accessible sur le port de statut"
    fi
}

# Affichage des informations de connexion
show_connection_info() {
    log_info "Informations de connexion:"
    
    # R√©cup√©rer les ports depuis le fichier d'environnement
    MCP_PORT=$(grep "MCP_EXTERNAL_PORT" "$ENV_FILE" | cut -d'=' -f2)
    MCP_PORT=${MCP_PORT:-39127}
    STATUS_PORT=$(grep "MCP_STATUS_PORT" "$ENV_FILE" | cut -d'=' -f2)
    STATUS_PORT=${STATUS_PORT:-39128}
    
    echo ""
    echo "üåê Serveur MCP accessible sur:"
    echo "   - Port principal: $MCP_PORT"
    echo "   - Port de statut: $STATUS_PORT"
    echo ""
    echo "üìä Endpoints disponibles:"
    echo "   - Statut: http://localhost:$STATUS_PORT/health"
    echo "   - Info: http://localhost:$STATUS_PORT/"
    echo ""
    echo "üîß Commandes utiles:"
    echo "   - Logs: docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE logs -f"
    echo "   - Arr√™t: docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE down"
    echo "   - Red√©marrage: docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE restart"
    echo ""
}

# Fonction principale
main() {
    echo "üöÄ D√©ploiement OpenProject MCP Server pour Production"
    echo "=================================================="
    echo ""
    
    check_prerequisites
    check_configuration
    deploy
    check_status
    show_connection_info
    
    log_info "D√©ploiement termin√© avec succ√®s !"
}

# Gestion des arguments
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "status")
        docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" ps
        ;;
    "logs")
        docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" logs -f
        ;;
    "stop")
        docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" down
        ;;
    "restart")
        docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" restart
        ;;
    *)
        echo "Usage: $0 {deploy|status|logs|stop|restart}"
        echo "  deploy   - D√©ployer le service (d√©faut)"
        echo "  status   - Afficher le statut des services"
        echo "  logs     - Afficher les logs en temps r√©el"
        echo "  stop     - Arr√™ter les services"
        echo "  restart  - Red√©marrer les services"
        exit 1
        ;;
esac
